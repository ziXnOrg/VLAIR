from __future__ import annotations

from typing import Any, Dict, Optional

from .base import Agent, AgentContext


class CodeGenAgent(Agent):
  def __init__(self) -> None:
    super().__init__("CodeGenAgent")

  def _default_content(self, action: str, target: str, instructions: Optional[str]) -> str:
    if target.endswith(".py"):
      header = f"# generated:{action}:{target}\n"
      body = "def autogenerated() -> int:\n    return 0\n"
      return header + body
    # Fallback for non-Python targets
    return f"/* generated:{action}:{target} */\n"

  def run(self, task: Dict[str, Any], ctx: AgentContext | None = None) -> Dict[str, Any]:
    payload = task.get("payload", {})
    target = str(payload.get("target", ""))
    action = str(payload.get("action", payload.get("mode", "create")))
    instructions_any = payload.get("instructions")
    instructions = instructions_any if isinstance(instructions_any, str) else None
    content_any = payload.get("content")
    text = content_any if isinstance(content_any, str) else self._default_content(action, target, instructions)

    result: Dict[str, Any] = {
      "type": "AgentResult",
      "id": f"res-{task.get('id','')}",
      "parentId": str(task.get("id", "")),
      "agent": self.name,
      "payload": {
        "delta": {
          "doc": {
            "path": target,
            "content": text,
          }
        }
      },
      "protocolVersion": 1,
    }
    return result