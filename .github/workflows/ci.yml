name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  benchmarks:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-benchmark

      - name: Run Benches (hybrid search)
        run: |
          python bench/context/hybrid_search_bench.py > bench_hybrid.json || true
          python bench/context/upsert_bench.py > bench_upsert.json || true

      - name: Enforce Bench Thresholds
        run: |
          python - << 'PY'
          import json, sys
          def check(path, max_avg_ms):
              try:
                  with open(path) as f:
                      d=json.load(f)
                  avg=d.get('avg_ms') or d.get('avg_ms_per_doc') or 0
                  print(f"{path}: avg={avg}ms")
                  if avg and avg > max_avg_ms:
                      print(f"::error ::{path} avg {avg}ms exceeds {max_avg_ms}ms threshold")
                      return 1
              except Exception as e:
                  print(f"warning: could not read {path}: {e}")
              return 0
          rc=0
          rc |= check('bench_hybrid.json', 1000)
          rc |= check('bench_upsert.json', 1000)
          sys.exit(rc)
          PY

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            bench_hybrid.json
            bench_upsert.json

  ctest:
    name: CTest Unit + Integration
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install CMake & Python
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake python3 python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install pytest pytest-cov "pydantic>=1.10,<3"

      - name: Configure (fresh build dir)
        run: cmake -S . -B build-ci -DPython3_EXECUTABLE=$(which python3)

      - name: Build
        run: cmake --build build-ci --config Release -- -j2

      - name: Python Coverage (pytest-cov)
        run: |
          python3 -m pytest -q \
            --cov=orchestrator --cov=cli \
            --cov-report=term --cov-report=xml:coverage.xml \
            --cov-fail-under=85 \
            tests/unit tests/integration

      - name: List CTest tests
        run: |
          cd build-ci
          ctest -N || true

      - name: Run CTest (verbose)
        run: |
          cd build-ci
          set -o pipefail
          ctest -VV --output-on-failure | tee ctest-output.txt

      - name: Print CTest log
        if: always()
        run: |
          if [ -f build-ci/Testing/Temporary/LastTest.log ]; then
            echo "----- LastTest.log -----"
            sed -n '1,400p' build-ci/Testing/Temporary/LastTest.log || true
          fi

      - name: Upload CTest Log and Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            build-ci/Testing/Temporary/LastTest.log
            build-ci/ctest-output.txt
            coverage.xml


  windows-python:
    name: Python Unit Tests (Windows)
    runs-on: windows-latest
    env:
      PYTHONHASHSEED: '0'
      PYTHONPATH: ${{ github.workspace }}
      VLTAIR_SANDBOX_ENABLE_RESTRICTED_LAUNCH: '1'
      COVERAGE_FILE: coverage-windows.data
      VLTAIR_CI_DIAG: '1'
      VLTAIR_CI_DIAG_PATH: ci_diagnostics/run_pytests_v2_windows.jsonl
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov "pydantic>=1.10,<3"

      - name: Python Coverage (pytest-cov)
        shell: pwsh
        run: |
          pytest -q --cov=orchestrator --cov=cli --cov-report=term --cov-report=xml:coverage-windows.xml --cov-fail-under=85 tests/unit tests/integration

      - name: Upload Coverage (Windows)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-windows
          path: |
            coverage-windows.xml

      - name: Upload CI Diagnostics (Windows)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-diagnostics-windows
          path: |
            ci_diagnostics/**

  grpc-python:
    name: gRPC Parity (Python)
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install gRPC and test deps
        run: |
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools pytest pytest-cov

      - name: Generate gRPC stubs
        run: |
          python -m grpc_tools.protoc \
            -I orchestrator/transports/proto \
            --python_out=orchestrator/transports/proto \
            --grpc_python_out=orchestrator/transports/proto \
            orchestrator/transports/proto/agent.proto

      - name: Run gRPC parity tests with coverage
        run: |
          python -m pytest -q \
            --cov=orchestrator.transports.grpc_adapter \
            --cov-report=term \
            --cov-fail-under=85 \
            tests/integration/transport_grpc_parity_test.py

  build-wheels:
    name: Build Wheels + Smoke Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        py: ["3.11", "3.13"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py }}

      - name: Install build backend
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build wheel and sdist
        env:
          PYTHONHASHSEED: '0'
        run: |
          python -m build

      - name: Smoke install and run CLI
        env:
          PYTHONHASHSEED: '0'
        shell: bash
        run: |
          python -m pip install --force-reinstall dist/*.whl
          orchestrator --help >/dev/null 2>&1 || (echo "CLI failed" && exit 1)

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.py }}
          path: |
            dist/*.whl
            dist/*.tar.gz

  repro-check:
    name: Reproducible Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install build tool
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Run reproducibility check
        env:
          PYTHONHASHSEED: '0'
          SOURCE_DATE_EPOCH: '1700000000'
        run: |
          python scripts/repro_check.py

  sbom-provenance:
    name: SBOM + Provenance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Build artifacts
        env:
          PYTHONHASHSEED: '0'
          SOURCE_DATE_EPOCH: '1700000000'
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build
      - name: Generate provenance
        env:
          SOURCE_DATE_EPOCH: '1700000000'
        run: |
          python scripts/provenance.py
      - name: Create SBOM (CycloneDX)
        run: |
          python -m pip install cyclonedx-bom
          python -m venv .sbom
          . .sbom/bin/activate
          pip install dist/*.whl
          cyclonedx-py --format json --output dist/sbom.json || echo "cyclonedx-py fallback not found"
          deactivate
      - name: Upload SBOM/Provenance
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-provenance
          path: |
            dist/sbom.json
            dist/provenance.json

  e2e-acceptance:
    name: E2E Acceptance (Minimal Feature-Add)
    runs-on: ubuntu-latest
    env:
      PYTHONHASHSEED: '0'
      TZ: 'UTC'
      LC_ALL: 'C.UTF-8'
      LANG: 'C.UTF-8'
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov "pydantic>=1.10,<3"
      - name: Run E2E acceptance test with coverage
        run: |
          python -m pytest -q \
            --cov=orchestrator --cov=cli \
            --cov-report=term --cov-fail-under=85 \
            tests/e2e/feature_add_workflow_test.py::test_end_to_end_minimal
