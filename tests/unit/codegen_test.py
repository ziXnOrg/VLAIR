from __future__ import annotations

import builtins
from typing import Dict, Any

import pytest

from orchestrator.agents.codegen import CodeGenAgent
from orchestrator.schemas.validators import validate_agent_result, validate_agent_task


def test_codegen_create_python_compiles(tmp_path) -> None:
    agent = CodeGenAgent()
    task: Dict[str, Any] = {
        "id": "t1",
        "payload": {"action": "create", "target": "foo_gen.py"},
    }
    res = agent.run(task, None)

    # Shape checks
    assert res["type"] == "AgentResult"
    assert res["parentId"] == "t1"
    assert res["agent"] == "CodeGenAgent"
    assert "payload" in res and "delta" in res["payload"]
    doc = res["payload"]["delta"]["doc"]
    assert doc["path"] == "foo_gen.py"
    content = doc["content"]
    assert isinstance(content, str) and len(content) > 0

    # Validate schema
    validate_agent_result(res)

    # Integration-lite: ensure it compiles as Python
    path = tmp_path / "foo_gen.py"
    path.write_text(content, encoding="utf-8")
    compiled = builtins.compile(content, str(path), "exec")
    ns: Dict[str, Any] = {}
    exec(compiled, ns)
    assert "autogenerated" in ns and callable(ns["autogenerated"])  # type: ignore[index]


def test_codegen_modify_uses_provided_content() -> None:
    agent = CodeGenAgent()
    desired = "def x() -> int:\n    return 1\n"
    task: Dict[str, Any] = {
        "id": "t2",
        "payload": {"action": "modify", "target": "bar.py", "content": desired},
    }
    res = agent.run(task, None)
    doc = res["payload"]["delta"]["doc"]
    assert doc["path"] == "bar.py"
    assert doc["content"] == desired
    validate_agent_result(res)


def test_codegen_task_payload_validation() -> None:
    # create
    t1 = {
        "type": "AgentTask",
        "id": "t1",
        "agent": "CodeGenAgent",
        "payload": {"action": "create", "target": "a.py"},
    }
    validate_agent_task(t1)

    # modify with content
    t2 = {
        "type": "AgentTask",
        "id": "t2",
        "agent": "CodeGenAgent",
        "payload": {"action": "modify", "target": "a.py", "content": "# x"},
    }
    validate_agent_task(t2)

